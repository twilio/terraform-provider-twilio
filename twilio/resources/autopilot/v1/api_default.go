/*
 * Twilio - Autopilot
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.14.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/twilio/common"
	. "github.com/twilio/twilio-go/twilio/rest/autopilot/v1"
)

func ResourceAssistantsFieldTypes() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsFieldTypes,
		ReadContext:   readAssistantsFieldTypes,
		UpdateContext: updateAssistantsFieldTypes,
		DeleteContext: deleteAssistantsFieldTypes,
		Schema: map[string]*schema.Schema{
			"assistant_sid": AsString(SchemaRequired),
			"unique_name":   AsString(SchemaRequired),
			"friendly_name": AsString(SchemaOptional),
			"account_sid":   AsString(SchemaComputed),
			"date_created":  AsString(SchemaComputed),
			"date_updated":  AsString(SchemaComputed),
			"links":         AsString(SchemaComputed),
			"sid":           AsString(SchemaComputed),
			"url":           AsString(SchemaComputed),
		},
	}
}

func createAssistantsFieldTypes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateFieldTypeParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateFieldType(assistantSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsFieldTypes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteFieldType(assistantSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsFieldTypes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchFieldType(assistantSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsFieldTypes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateFieldTypeParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateFieldType(assistantSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistantsTasksSamples() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsTasksSamples,
		ReadContext:   readAssistantsTasksSamples,
		UpdateContext: updateAssistantsTasksSamples,
		DeleteContext: deleteAssistantsTasksSamples,
		Schema: map[string]*schema.Schema{
			"assistant_sid":  AsString(SchemaRequired),
			"task_sid":       AsString(SchemaRequired),
			"language":       AsString(SchemaRequired),
			"tagged_text":    AsString(SchemaRequired),
			"source_channel": AsString(SchemaOptional),
			"account_sid":    AsString(SchemaComputed),
			"date_created":   AsString(SchemaComputed),
			"date_updated":   AsString(SchemaComputed),
			"sid":            AsString(SchemaComputed),
			"url":            AsString(SchemaComputed),
		},
	}
}

func createAssistantsTasksSamples(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateSampleParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	taskSid := d.Get("task_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateSample(assistantSid, taskSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsTasksSamples(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	taskSid := d.Get("task_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteSample(assistantSid, taskSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsTasksSamples(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	taskSid := d.Get("task_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchSample(assistantSid, taskSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsTasksSamples(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateSampleParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	taskSid := d.Get("task_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateSample(assistantSid, taskSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistantsWebhooks() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsWebhooks,
		ReadContext:   readAssistantsWebhooks,
		UpdateContext: updateAssistantsWebhooks,
		DeleteContext: deleteAssistantsWebhooks,
		Schema: map[string]*schema.Schema{
			"assistant_sid":  AsString(SchemaRequired),
			"events":         AsString(SchemaRequired),
			"unique_name":    AsString(SchemaRequired),
			"webhook_url":    AsString(SchemaRequired),
			"webhook_method": AsString(SchemaOptional),
			"account_sid":    AsString(SchemaComputed),
			"date_created":   AsString(SchemaComputed),
			"date_updated":   AsString(SchemaComputed),
			"sid":            AsString(SchemaComputed),
			"url":            AsString(SchemaComputed),
		},
	}
}

func createAssistantsWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWebhookParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateWebhook(assistantSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteWebhook(assistantSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchWebhook(assistantSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWebhookParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateWebhook(assistantSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistants() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistants,
		ReadContext:   readAssistants,
		UpdateContext: updateAssistants,
		DeleteContext: deleteAssistants,
		Schema: map[string]*schema.Schema{
			"callback_events":        AsString(SchemaOptional),
			"callback_url":           AsString(SchemaOptional),
			"defaults":               AsString(SchemaOptional),
			"friendly_name":          AsString(SchemaOptional),
			"log_queries":            AsString(SchemaOptional),
			"style_sheet":            AsString(SchemaOptional),
			"unique_name":            AsString(SchemaOptional),
			"account_sid":            AsString(SchemaComputed),
			"date_created":           AsString(SchemaComputed),
			"date_updated":           AsString(SchemaComputed),
			"development_stage":      AsString(SchemaComputed),
			"latest_model_build_sid": AsString(SchemaComputed),
			"links":                  AsString(SchemaComputed),
			"needs_model_build":      AsString(SchemaComputed),
			"sid":                    AsString(SchemaComputed),
			"url":                    AsString(SchemaComputed),
		},
	}
}

func createAssistants(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateAssistantParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.AutopilotV1.CreateAssistant(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistants(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteAssistant(sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistants(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchAssistant(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistants(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateAssistantParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateAssistant(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistantsTasks() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsTasks,
		ReadContext:   readAssistantsTasks,
		UpdateContext: updateAssistantsTasks,
		DeleteContext: deleteAssistantsTasks,
		Schema: map[string]*schema.Schema{
			"assistant_sid": AsString(SchemaRequired),
			"unique_name":   AsString(SchemaRequired),
			"actions":       AsString(SchemaOptional),
			"actions_url":   AsString(SchemaOptional),
			"friendly_name": AsString(SchemaOptional),
			"account_sid":   AsString(SchemaComputed),
			"date_created":  AsString(SchemaComputed),
			"date_updated":  AsString(SchemaComputed),
			"links":         AsString(SchemaComputed),
			"sid":           AsString(SchemaComputed),
			"url":           AsString(SchemaComputed),
		},
	}
}

func createAssistantsTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateTaskParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateTask(assistantSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteTask(assistantSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchTask(assistantSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateTaskParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateTask(assistantSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistantsModelBuilds() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsModelBuilds,
		ReadContext:   readAssistantsModelBuilds,
		UpdateContext: updateAssistantsModelBuilds,
		DeleteContext: deleteAssistantsModelBuilds,
		Schema: map[string]*schema.Schema{
			"assistant_sid":   AsString(SchemaRequired),
			"status_callback": AsString(SchemaOptional),
			"unique_name":     AsString(SchemaOptional),
			"account_sid":     AsString(SchemaComputed),
			"build_duration":  AsString(SchemaComputed),
			"date_created":    AsString(SchemaComputed),
			"date_updated":    AsString(SchemaComputed),
			"error_code":      AsString(SchemaComputed),
			"sid":             AsString(SchemaComputed),
			"status":          AsString(SchemaComputed),
			"url":             AsString(SchemaComputed),
		},
	}
}

func createAssistantsModelBuilds(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateModelBuildParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateModelBuild(assistantSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsModelBuilds(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteModelBuild(assistantSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsModelBuilds(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchModelBuild(assistantSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsModelBuilds(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateModelBuildParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateModelBuild(assistantSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceAssistantsQueries() *schema.Resource {
	return &schema.Resource{
		CreateContext: createAssistantsQueries,
		ReadContext:   readAssistantsQueries,
		UpdateContext: updateAssistantsQueries,
		DeleteContext: deleteAssistantsQueries,
		Schema: map[string]*schema.Schema{
			"assistant_sid":   AsString(SchemaRequired),
			"language":        AsString(SchemaRequired),
			"query":           AsString(SchemaRequired),
			"model_build":     AsString(SchemaOptional),
			"tasks":           AsString(SchemaOptional),
			"account_sid":     AsString(SchemaComputed),
			"date_created":    AsString(SchemaComputed),
			"date_updated":    AsString(SchemaComputed),
			"dialogue_sid":    AsString(SchemaComputed),
			"model_build_sid": AsString(SchemaComputed),
			"results":         AsString(SchemaComputed),
			"sample_sid":      AsString(SchemaComputed),
			"sid":             AsString(SchemaComputed),
			"source_channel":  AsString(SchemaComputed),
			"status":          AsString(SchemaComputed),
			"url":             AsString(SchemaComputed),
		},
	}
}

func createAssistantsQueries(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateQueryParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.CreateQuery(assistantSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteAssistantsQueries(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.AutopilotV1.DeleteQuery(assistantSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readAssistantsQueries(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.FetchQuery(assistantSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateAssistantsQueries(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateQueryParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	assistantSid := d.Get("assistant_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.AutopilotV1.UpdateQuery(assistantSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}
