/*
 * Twilio - Flex
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.16.1
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/twilio/common"
	. "github.com/twilio/twilio-go/rest/flex/v1"
)

func ResourceFlexFlows() *schema.Resource {
	return &schema.Resource{
		CreateContext: createFlexFlows,
		ReadContext:   readFlexFlows,
		UpdateContext: updateFlexFlows,
		DeleteContext: deleteFlexFlows,
		Schema: map[string]*schema.Schema{
			"channel_type":                    AsString(SchemaComputedOptional),
			"chat_service_sid":                AsString(SchemaComputedOptional),
			"contact_identity":                AsString(SchemaComputedOptional),
			"enabled":                         AsBool(SchemaComputedOptional),
			"friendly_name":                   AsString(SchemaComputedOptional),
			"integration_channel":             AsString(SchemaComputedOptional),
			"integration_creation_on_message": AsBool(SchemaComputedOptional),
			"integration_flow_sid":            AsString(SchemaComputedOptional),
			"integration_priority":            AsInt(SchemaComputedOptional),
			"integration_retry_count":         AsInt(SchemaComputedOptional),
			"integration_timeout":             AsInt(SchemaComputedOptional),
			"integration_url":                 AsString(SchemaComputedOptional),
			"integration_workflow_sid":        AsString(SchemaComputedOptional),
			"integration_workspace_sid":       AsString(SchemaComputedOptional),
			"integration_type":                AsString(SchemaComputedOptional),
			"janitor_enabled":                 AsBool(SchemaComputedOptional),
			"long_lived":                      AsBool(SchemaComputedOptional),
			"sid":                             AsString(SchemaComputed),
		},
	}
}

func createFlexFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateFlexFlowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.FlexV1.CreateFlexFlow(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteFlexFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.FlexV1.DeleteFlexFlow(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readFlexFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.FlexV1.FetchFlexFlow(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func updateFlexFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateFlexFlowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.FlexV1.UpdateFlexFlow(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceWebChannels() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWebChannels,
		ReadContext:   readWebChannels,
		UpdateContext: updateWebChannels,
		DeleteContext: deleteWebChannels,
		Schema: map[string]*schema.Schema{
			"chat_friendly_name":     AsString(SchemaComputedOptional),
			"chat_unique_name":       AsString(SchemaComputedOptional),
			"customer_friendly_name": AsString(SchemaComputedOptional),
			"flex_flow_sid":          AsString(SchemaComputedOptional),
			"identity":               AsString(SchemaComputedOptional),
			"pre_engagement_data":    AsString(SchemaComputedOptional),
			"sid":                    AsString(SchemaComputed),
			"chat_status":            AsString(SchemaComputedOptional),
			"post_engagement_data":   AsString(SchemaComputedOptional),
		},
	}
}

func createWebChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWebChannelParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.FlexV1.CreateWebChannel(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	d.Set("sid", *r.Sid)

	return updateWebChannels(ctx, d, m)
}

func deleteWebChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.FlexV1.DeleteWebChannel(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readWebChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.FlexV1.FetchWebChannel(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func updateWebChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWebChannelParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.FlexV1.UpdateWebChannel(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}
