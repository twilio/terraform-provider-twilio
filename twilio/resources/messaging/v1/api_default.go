/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/core"
	. "github.com/twilio/twilio-go/rest/messaging/v1"
)

func ResourceServicesAlphaSenders() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesAlphaSenders,
		ReadContext:   readServicesAlphaSenders,
		DeleteContext: deleteServicesAlphaSenders,
		Schema: map[string]*schema.Schema{
			"service_sid":  AsString(SchemaForceNewRequired),
			"alpha_sender": AsString(SchemaForceNewRequired),
			"sid":          AsString(SchemaComputed),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseServicesAlphaSendersImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createServicesAlphaSenders(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateAlphaSenderParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.CreateAlphaSender(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{serviceSid}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteServicesAlphaSenders(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeleteAlphaSender(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readServicesAlphaSenders(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchAlphaSender(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseServicesAlphaSendersImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected service_sid/sid"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("service_sid", importParts[0])
	d.Set("sid", importParts[1])

	return nil
}
func ResourceServicesPhoneNumbers() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesPhoneNumbers,
		ReadContext:   readServicesPhoneNumbers,
		DeleteContext: deleteServicesPhoneNumbers,
		Schema: map[string]*schema.Schema{
			"service_sid":      AsString(SchemaForceNewRequired),
			"phone_number_sid": AsString(SchemaForceNewRequired),
			"sid":              AsString(SchemaComputed),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseServicesPhoneNumbersImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createServicesPhoneNumbers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreatePhoneNumberParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.CreatePhoneNumber(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{serviceSid}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteServicesPhoneNumbers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeletePhoneNumber(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readServicesPhoneNumbers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchPhoneNumber(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseServicesPhoneNumbersImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected service_sid/sid"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("service_sid", importParts[0])
	d.Set("sid", importParts[1])
	d.Set("phone_number_sid", importParts[1])

	return nil
}
func ResourceServices() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServices,
		ReadContext:   readServices,
		UpdateContext: updateServices,
		DeleteContext: deleteServices,
		Schema: map[string]*schema.Schema{
			"friendly_name":                 AsString(SchemaRequired),
			"inbound_request_url":           AsString(SchemaComputedOptional),
			"inbound_method":                AsString(SchemaComputedOptional),
			"fallback_url":                  AsString(SchemaComputedOptional),
			"fallback_method":               AsString(SchemaComputedOptional),
			"status_callback":               AsString(SchemaComputedOptional),
			"sticky_sender":                 AsBool(SchemaComputedOptional),
			"mms_converter":                 AsBool(SchemaComputedOptional),
			"smart_encoding":                AsBool(SchemaComputedOptional),
			"scan_message_content":          AsString(SchemaComputedOptional),
			"fallback_to_long_code":         AsBool(SchemaComputedOptional),
			"area_code_geomatch":            AsBool(SchemaComputedOptional),
			"validity_period":               AsInt(SchemaComputedOptional),
			"synchronous_validation":        AsBool(SchemaComputedOptional),
			"usecase":                       AsString(SchemaComputedOptional),
			"use_inbound_webhook_on_number": AsBool(SchemaComputedOptional),
			"sid":                           AsString(SchemaComputed),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseServicesImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateServiceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.MessagingV1.CreateService(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeleteService(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchService(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseServicesImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected sid"

	if len(importParts) != 1 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("sid", importParts[0])

	return nil
}
func updateServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateServiceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.UpdateService(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceServicesShortCodes() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesShortCodes,
		ReadContext:   readServicesShortCodes,
		DeleteContext: deleteServicesShortCodes,
		Schema: map[string]*schema.Schema{
			"service_sid":    AsString(SchemaForceNewRequired),
			"short_code_sid": AsString(SchemaForceNewRequired),
			"sid":            AsString(SchemaComputed),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseServicesShortCodesImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createServicesShortCodes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateShortCodeParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.CreateShortCode(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{serviceSid}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteServicesShortCodes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeleteShortCode(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readServicesShortCodes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchShortCode(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseServicesShortCodesImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected service_sid/sid"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("service_sid", importParts[0])
	d.Set("sid", importParts[1])

	return nil
}
func ResourceTollfreeVerifications() *schema.Resource {
	return &schema.Resource{
		CreateContext: createTollfreeVerifications,
		ReadContext:   readTollfreeVerifications,
		UpdateContext: updateTollfreeVerifications,
		DeleteContext: deleteTollfreeVerifications,
		Schema: map[string]*schema.Schema{
			"business_name":                  AsString(SchemaRequired),
			"business_website":               AsString(SchemaRequired),
			"notification_email":             AsString(SchemaRequired),
			"use_case_categories":            AsList(AsString(SchemaRequired), SchemaRequired),
			"use_case_summary":               AsString(SchemaRequired),
			"production_message_sample":      AsString(SchemaRequired),
			"opt_in_image_urls":              AsList(AsString(SchemaRequired), SchemaRequired),
			"opt_in_type":                    AsString(SchemaRequired),
			"message_volume":                 AsString(SchemaRequired),
			"tollfree_phone_number_sid":      AsString(SchemaForceNewRequired),
			"customer_profile_sid":           AsString(SchemaForceNewOptional),
			"business_street_address":        AsString(SchemaComputedOptional),
			"business_street_address2":       AsString(SchemaComputedOptional),
			"business_city":                  AsString(SchemaComputedOptional),
			"business_state_province_region": AsString(SchemaComputedOptional),
			"business_postal_code":           AsString(SchemaComputedOptional),
			"business_country":               AsString(SchemaComputedOptional),
			"additional_information":         AsString(SchemaComputedOptional),
			"business_contact_first_name":    AsString(SchemaComputedOptional),
			"business_contact_last_name":     AsString(SchemaComputedOptional),
			"business_contact_email":         AsString(SchemaComputedOptional),
			"business_contact_phone":         AsString(SchemaComputedOptional),
			"external_reference_id":          AsString(SchemaForceNewOptional),
			"sid":                            AsString(SchemaComputed),
			"edit_reason":                    AsString(SchemaComputedOptional),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseTollfreeVerificationsImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createTollfreeVerifications(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateTollfreeVerificationParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.MessagingV1.CreateTollfreeVerification(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))
	d.Set("sid", *r.Sid)

	return updateTollfreeVerifications(ctx, d, m)
}

func deleteTollfreeVerifications(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeleteTollfreeVerification(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readTollfreeVerifications(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchTollfreeVerification(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseTollfreeVerificationsImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected sid"

	if len(importParts) != 1 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("sid", importParts[0])

	return nil
}
func updateTollfreeVerifications(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateTollfreeVerificationParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.UpdateTollfreeVerification(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceServicesComplianceUsa2p() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesComplianceUsa2p,
		ReadContext:   readServicesComplianceUsa2p,
		UpdateContext: updateServicesComplianceUsa2p,
		DeleteContext: deleteServicesComplianceUsa2p,
		Schema: map[string]*schema.Schema{
			"messaging_service_sid":    AsString(SchemaRequired),
			"brand_registration_sid":   AsString(SchemaForceNewRequired),
			"description":              AsString(SchemaRequired),
			"message_flow":             AsString(SchemaRequired),
			"message_samples":          AsList(AsString(SchemaRequired), SchemaRequired),
			"us_app_to_person_usecase": AsString(SchemaForceNewRequired),
			"has_embedded_links":       AsBool(SchemaRequired),
			"has_embedded_phone":       AsBool(SchemaRequired),
			"opt_in_message":           AsString(SchemaForceNewOptional),
			"opt_out_message":          AsString(SchemaForceNewOptional),
			"help_message":             AsString(SchemaForceNewOptional),
			"opt_in_keywords":          AsList(AsString(SchemaForceNewOptional), SchemaForceNewOptional),
			"opt_out_keywords":         AsList(AsString(SchemaForceNewOptional), SchemaForceNewOptional),
			"help_keywords":            AsList(AsString(SchemaForceNewOptional), SchemaForceNewOptional),
			"subscriber_opt_in":        AsBool(SchemaForceNewOptional),
			"age_gated":                AsBool(SchemaComputedOptional),
			"direct_lending":           AsBool(SchemaComputedOptional),
			"sid":                      AsString(SchemaComputed),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseServicesComplianceUsa2pImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createServicesComplianceUsa2p(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateUsAppToPersonParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	messagingServiceSid := d.Get("messaging_service_sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.CreateUsAppToPerson(messagingServiceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{messagingServiceSid}
	idParts = append(idParts, (*r.Sid))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteServicesComplianceUsa2p(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	messagingServiceSid := d.Get("messaging_service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.MessagingV1.DeleteUsAppToPerson(messagingServiceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readServicesComplianceUsa2p(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	messagingServiceSid := d.Get("messaging_service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.FetchUsAppToPerson(messagingServiceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseServicesComplianceUsa2pImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected messaging_service_sid/sid"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("messaging_service_sid", importParts[0])
	d.Set("sid", importParts[1])

	return nil
}
func updateServicesComplianceUsa2p(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateUsAppToPersonParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	messagingServiceSid := d.Get("messaging_service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.MessagingV1.UpdateUsAppToPerson(messagingServiceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}
