/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Microvisor
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/core"
	. "github.com/twilio/twilio-go/rest/microvisor/v1"
)

func ResourceConfigs() *schema.Resource {
	return &schema.Resource{
		CreateContext: createConfigs,
		ReadContext:   readConfigs,
		UpdateContext: updateConfigs,
		DeleteContext: deleteConfigs,
		Schema: map[string]*schema.Schema{
			"key":   AsString(SchemaRequired),
			"value": AsString(SchemaRequired),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseConfigsImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateAccountConfigParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.MicrovisorV1.CreateAccountConfig(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{}
	idParts = append(idParts, (*r.Key))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	key := d.Get("key").(string)

	err := m.(*client.Config).Client.MicrovisorV1.DeleteAccountConfig(key)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.FetchAccountConfig(key)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseConfigsImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected key"

	if len(importParts) != 1 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("key", importParts[0])

	return nil
}
func updateConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateAccountConfigParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.UpdateAccountConfig(key, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceSecrets() *schema.Resource {
	return &schema.Resource{
		CreateContext: createSecrets,
		ReadContext:   readSecrets,
		UpdateContext: updateSecrets,
		DeleteContext: deleteSecrets,
		Schema: map[string]*schema.Schema{
			"key":   AsString(SchemaRequired),
			"value": AsString(SchemaRequired),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseSecretsImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateAccountSecretParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.MicrovisorV1.CreateAccountSecret(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{}
	idParts = append(idParts, (*r.Key))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	key := d.Get("key").(string)

	err := m.(*client.Config).Client.MicrovisorV1.DeleteAccountSecret(key)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.FetchAccountSecret(key)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseSecretsImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected key"

	if len(importParts) != 1 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("key", importParts[0])

	return nil
}
func updateSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateAccountSecretParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.UpdateAccountSecret(key, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceDevicesConfigs() *schema.Resource {
	return &schema.Resource{
		CreateContext: createDevicesConfigs,
		ReadContext:   readDevicesConfigs,
		UpdateContext: updateDevicesConfigs,
		DeleteContext: deleteDevicesConfigs,
		Schema: map[string]*schema.Schema{
			"device_sid": AsString(SchemaRequired),
			"key":        AsString(SchemaRequired),
			"value":      AsString(SchemaRequired),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseDevicesConfigsImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createDevicesConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateDeviceConfigParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	deviceSid := d.Get("device_sid").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.CreateDeviceConfig(deviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{deviceSid}
	idParts = append(idParts, (*r.Key))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteDevicesConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	err := m.(*client.Config).Client.MicrovisorV1.DeleteDeviceConfig(deviceSid, key)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readDevicesConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.FetchDeviceConfig(deviceSid, key)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseDevicesConfigsImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected device_sid/key"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("device_sid", importParts[0])
	d.Set("key", importParts[1])

	return nil
}
func updateDevicesConfigs(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateDeviceConfigParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.UpdateDeviceConfig(deviceSid, key, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func ResourceDevicesSecrets() *schema.Resource {
	return &schema.Resource{
		CreateContext: createDevicesSecrets,
		ReadContext:   readDevicesSecrets,
		UpdateContext: updateDevicesSecrets,
		DeleteContext: deleteDevicesSecrets,
		Schema: map[string]*schema.Schema{
			"device_sid": AsString(SchemaRequired),
			"key":        AsString(SchemaRequired),
			"value":      AsString(SchemaRequired),
		},
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
				err := parseDevicesSecretsImportId(d.Id(), d)
				if err != nil {
					return nil, err
				}

				return []*schema.ResourceData{d}, nil
			},
		},
	}
}

func createDevicesSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateDeviceSecretParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	deviceSid := d.Get("device_sid").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.CreateDeviceSecret(deviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	idParts := []string{deviceSid}
	idParts = append(idParts, (*r.Key))
	d.SetId(strings.Join(idParts, "/"))

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func deleteDevicesSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	err := m.(*client.Config).Client.MicrovisorV1.DeleteDeviceSecret(deviceSid, key)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readDevicesSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.FetchDeviceSecret(deviceSid, key)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func parseDevicesSecretsImportId(importId string, d *schema.ResourceData) error {
	importParts := strings.Split(importId, "/")
	errStr := "invalid import ID (%q), expected device_sid/key"

	if len(importParts) != 2 {
		return fmt.Errorf(errStr, importId)
	}

	d.Set("device_sid", importParts[0])
	d.Set("key", importParts[1])

	return nil
}
func updateDevicesSecrets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateDeviceSecretParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	deviceSid := d.Get("device_sid").(string)
	key := d.Get("key").(string)

	r, err := m.(*client.Config).Client.MicrovisorV1.UpdateDeviceSecret(deviceSid, key, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}
