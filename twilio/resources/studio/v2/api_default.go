/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.16.1
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/twilio/common"
	. "github.com/twilio/twilio-go/rest/studio/v2"
)

func ResourceFlowsExecutions() *schema.Resource {
	return &schema.Resource{
		CreateContext: createFlowsExecutions,
		ReadContext:   readFlowsExecutions,
		UpdateContext: updateFlowsExecutions,
		DeleteContext: deleteFlowsExecutions,
		Schema: map[string]*schema.Schema{
			"flow_sid":                AsString(SchemaRequired),
			"from":                    AsString(SchemaOptional),
			"parameters":              AsString(SchemaOptional),
			"to":                      AsString(SchemaOptional),
			"account_sid":             AsString(SchemaOptional),
			"contact_channel_address": AsString(SchemaOptional),
			"context":                 AsString(SchemaOptional),
			"date_created":            AsString(SchemaOptional),
			"date_updated":            AsString(SchemaOptional),
			"links":                   AsString(SchemaOptional),
			"sid":                     AsString(SchemaOptional),
			"status":                  AsString(SchemaOptional),
			"url":                     AsString(SchemaOptional),
		},
	}
}

func createFlowsExecutions(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateExecutionParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	flowSid := d.Get("flow_sid").(string)

	r, err := m.(*client.Config).Client.StudioV2.CreateExecution(flowSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteFlowsExecutions(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	flowSid := d.Get("flow_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.StudioV2.DeleteExecution(flowSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readFlowsExecutions(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	flowSid := d.Get("flow_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.StudioV2.FetchExecution(flowSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateFlowsExecutions(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateExecutionParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	flowSid := d.Get("flow_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.StudioV2.UpdateExecution(flowSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceFlows() *schema.Resource {
	return &schema.Resource{
		CreateContext: createFlows,
		ReadContext:   readFlows,
		UpdateContext: updateFlows,
		DeleteContext: deleteFlows,
		Schema: map[string]*schema.Schema{
			"commit_message": AsString(SchemaOptional),
			"definition":     AsString(SchemaOptional),
			"friendly_name":  AsString(SchemaOptional),
			"status":         AsString(SchemaOptional),
			"account_sid":    AsString(SchemaOptional),
			"date_created":   AsString(SchemaOptional),
			"date_updated":   AsString(SchemaOptional),
			"errors":         AsList(AsString(SchemaOptional), SchemaOptional),
			"links":          AsString(SchemaOptional),
			"revision":       AsInt(SchemaOptional),
			"sid":            AsString(SchemaOptional),
			"url":            AsString(SchemaOptional),
			"valid":          AsBool(SchemaOptional),
			"warnings":       AsList(AsString(SchemaOptional), SchemaOptional),
			"webhook_url":    AsString(SchemaOptional),
		},
	}
}

func createFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateFlowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.StudioV2.CreateFlow(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.StudioV2.DeleteFlow(sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.StudioV2.FetchFlow(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateFlows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateFlowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.StudioV2.UpdateFlow(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}
