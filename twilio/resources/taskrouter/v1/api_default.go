/*
 * Twilio - Taskrouter
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.16.1
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/twilio/common"
	. "github.com/twilio/twilio-go/rest/taskrouter/v1"
)

func ResourceWorkspacesTaskQueues() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesTaskQueues,
		ReadContext:   readWorkspacesTaskQueues,
		UpdateContext: updateWorkspacesTaskQueues,
		DeleteContext: deleteWorkspacesTaskQueues,
		Schema: map[string]*schema.Schema{
			"workspace_sid":             AsString(SchemaRequired),
			"assignment_activity_sid":   AsString(SchemaOptional),
			"friendly_name":             AsString(SchemaOptional),
			"max_reserved_workers":      AsInt(SchemaOptional),
			"reservation_activity_sid":  AsString(SchemaOptional),
			"target_workers":            AsString(SchemaOptional),
			"task_order":                AsString(SchemaOptional),
			"account_sid":               AsString(SchemaComputed),
			"assignment_activity_name":  AsString(SchemaComputed),
			"date_created":              AsString(SchemaComputed),
			"date_updated":              AsString(SchemaComputed),
			"links":                     AsString(SchemaComputed),
			"reservation_activity_name": AsString(SchemaComputed),
			"sid":                       AsString(SchemaComputed),
			"url":                       AsString(SchemaComputed),
		},
	}
}

func createWorkspacesTaskQueues(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateTaskQueueParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateTaskQueue(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesTaskQueues(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteTaskQueue(workspaceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesTaskQueues(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchTaskQueue(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesTaskQueues(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateTaskQueueParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateTaskQueue(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspacesTasks() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesTasks,
		ReadContext:   readWorkspacesTasks,
		UpdateContext: updateWorkspacesTasks,
		DeleteContext: deleteWorkspacesTasks,
		Schema: map[string]*schema.Schema{
			"workspace_sid":            AsString(SchemaRequired),
			"attributes":               AsString(SchemaOptional),
			"priority":                 AsInt(SchemaOptional),
			"task_channel":             AsString(SchemaOptional),
			"timeout":                  AsInt(SchemaOptional),
			"workflow_sid":             AsString(SchemaOptional),
			"account_sid":              AsString(SchemaComputed),
			"addons":                   AsString(SchemaComputed),
			"age":                      AsInt(SchemaComputed),
			"assignment_status":        AsString(SchemaComputed),
			"date_created":             AsString(SchemaComputed),
			"date_updated":             AsString(SchemaComputed),
			"links":                    AsString(SchemaComputed),
			"reason":                   AsString(SchemaComputed),
			"sid":                      AsString(SchemaComputed),
			"task_channel_sid":         AsString(SchemaComputed),
			"task_channel_unique_name": AsString(SchemaComputed),
			"task_queue_entered_date":  AsString(SchemaComputed),
			"task_queue_friendly_name": AsString(SchemaComputed),
			"task_queue_sid":           AsString(SchemaComputed),
			"url":                      AsString(SchemaComputed),
			"workflow_friendly_name":   AsString(SchemaComputed),
		},
	}
}

func createWorkspacesTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateTaskParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateTask(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := DeleteTaskParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteTask(workspaceSid, sid, &params)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchTask(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesTasks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateTaskParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateTask(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspaces() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspaces,
		ReadContext:   readWorkspaces,
		UpdateContext: updateWorkspaces,
		DeleteContext: deleteWorkspaces,
		Schema: map[string]*schema.Schema{
			"event_callback_url":     AsString(SchemaOptional),
			"events_filter":          AsString(SchemaOptional),
			"friendly_name":          AsString(SchemaOptional),
			"multi_task_enabled":     AsBool(SchemaOptional),
			"prioritize_queue_order": AsString(SchemaOptional),
			"template":               AsString(SchemaOptional),
			"account_sid":            AsString(SchemaComputed),
			"date_created":           AsString(SchemaComputed),
			"date_updated":           AsString(SchemaComputed),
			"default_activity_name":  AsString(SchemaComputed),
			"default_activity_sid":   AsString(SchemaComputed),
			"links":                  AsString(SchemaComputed),
			"sid":                    AsString(SchemaComputed),
			"timeout_activity_name":  AsString(SchemaComputed),
			"timeout_activity_sid":   AsString(SchemaComputed),
			"url":                    AsString(SchemaComputed),
		},
	}
}

func createWorkspaces(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWorkspaceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateWorkspace(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspaces(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteWorkspace(sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspaces(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchWorkspace(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspaces(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWorkspaceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateWorkspace(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspacesWorkflows() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesWorkflows,
		ReadContext:   readWorkspacesWorkflows,
		UpdateContext: updateWorkspacesWorkflows,
		DeleteContext: deleteWorkspacesWorkflows,
		Schema: map[string]*schema.Schema{
			"workspace_sid":                    AsString(SchemaRequired),
			"assignment_callback_url":          AsString(SchemaOptional),
			"configuration":                    AsString(SchemaOptional),
			"fallback_assignment_callback_url": AsString(SchemaOptional),
			"friendly_name":                    AsString(SchemaOptional),
			"task_reservation_timeout":         AsInt(SchemaOptional),
			"account_sid":                      AsString(SchemaComputed),
			"date_created":                     AsString(SchemaComputed),
			"date_updated":                     AsString(SchemaComputed),
			"document_content_type":            AsString(SchemaComputed),
			"links":                            AsString(SchemaComputed),
			"sid":                              AsString(SchemaComputed),
			"url":                              AsString(SchemaComputed),
		},
	}
}

func createWorkspacesWorkflows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWorkflowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateWorkflow(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesWorkflows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteWorkflow(workspaceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesWorkflows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchWorkflow(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesWorkflows(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWorkflowParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateWorkflow(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspacesTaskChannels() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesTaskChannels,
		ReadContext:   readWorkspacesTaskChannels,
		UpdateContext: updateWorkspacesTaskChannels,
		DeleteContext: deleteWorkspacesTaskChannels,
		Schema: map[string]*schema.Schema{
			"workspace_sid":             AsString(SchemaRequired),
			"channel_optimized_routing": AsBool(SchemaOptional),
			"friendly_name":             AsString(SchemaOptional),
			"unique_name":               AsString(SchemaOptional),
			"account_sid":               AsString(SchemaComputed),
			"date_created":              AsString(SchemaComputed),
			"date_updated":              AsString(SchemaComputed),
			"links":                     AsString(SchemaComputed),
			"sid":                       AsString(SchemaComputed),
			"url":                       AsString(SchemaComputed),
		},
	}
}

func createWorkspacesTaskChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateTaskChannelParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateTaskChannel(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesTaskChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteTaskChannel(workspaceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesTaskChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchTaskChannel(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesTaskChannels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateTaskChannelParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateTaskChannel(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspacesWorkers() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesWorkers,
		ReadContext:   readWorkspacesWorkers,
		UpdateContext: updateWorkspacesWorkers,
		DeleteContext: deleteWorkspacesWorkers,
		Schema: map[string]*schema.Schema{
			"workspace_sid":       AsString(SchemaRequired),
			"activity_sid":        AsString(SchemaOptional),
			"attributes":          AsString(SchemaOptional),
			"friendly_name":       AsString(SchemaOptional),
			"account_sid":         AsString(SchemaComputed),
			"activity_name":       AsString(SchemaComputed),
			"available":           AsBool(SchemaComputed),
			"date_created":        AsString(SchemaComputed),
			"date_status_changed": AsString(SchemaComputed),
			"date_updated":        AsString(SchemaComputed),
			"links":               AsString(SchemaComputed),
			"sid":                 AsString(SchemaComputed),
			"url":                 AsString(SchemaComputed),
		},
	}
}

func createWorkspacesWorkers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWorkerParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateWorker(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesWorkers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteWorker(workspaceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesWorkers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchWorker(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesWorkers(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWorkerParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateWorker(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceWorkspacesActivities() *schema.Resource {
	return &schema.Resource{
		CreateContext: createWorkspacesActivities,
		ReadContext:   readWorkspacesActivities,
		UpdateContext: updateWorkspacesActivities,
		DeleteContext: deleteWorkspacesActivities,
		Schema: map[string]*schema.Schema{
			"workspace_sid": AsString(SchemaRequired),
			"available":     AsBool(SchemaOptional),
			"friendly_name": AsString(SchemaOptional),
			"account_sid":   AsString(SchemaComputed),
			"date_created":  AsString(SchemaComputed),
			"date_updated":  AsString(SchemaComputed),
			"sid":           AsString(SchemaComputed),
			"url":           AsString(SchemaComputed),
		},
	}
}

func createWorkspacesActivities(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateActivityParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.CreateActivity(workspaceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*r.Sid)
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteWorkspacesActivities(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.TaskrouterV1.DeleteActivity(workspaceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readWorkspacesActivities(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.FetchActivity(workspaceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateWorkspacesActivities(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateActivityParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	workspaceSid := d.Get("workspace_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.TaskrouterV1.UpdateActivity(workspaceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}
