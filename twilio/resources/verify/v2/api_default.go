/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.16.1
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	. "github.com/twilio/terraform-provider-twilio/twilio/common"
	. "github.com/twilio/twilio-go/rest/verify/v2"
)

func ResourceServicesRateLimitsBuckets() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesRateLimitsBuckets,
		ReadContext:   readServicesRateLimitsBuckets,
		UpdateContext: updateServicesRateLimitsBuckets,
		DeleteContext: deleteServicesRateLimitsBuckets,
		Schema: map[string]*schema.Schema{
			"service_sid":    AsString(SchemaRequired),
			"rate_limit_sid": AsString(SchemaRequired),
			"interval":       AsInt(SchemaOptional),
			"max":            AsInt(SchemaOptional),
			"account_sid":    AsString(SchemaOptional),
			"date_created":   AsString(SchemaOptional),
			"date_updated":   AsString(SchemaOptional),
			"sid":            AsString(SchemaOptional),
			"url":            AsString(SchemaOptional),
		},
	}
}

func createServicesRateLimitsBuckets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateBucketParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	rateLimitSid := d.Get("rate_limit_sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.CreateBucket(serviceSid, rateLimitSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServicesRateLimitsBuckets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	rateLimitSid := d.Get("rate_limit_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteBucket(serviceSid, rateLimitSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServicesRateLimitsBuckets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	rateLimitSid := d.Get("rate_limit_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchBucket(serviceSid, rateLimitSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServicesRateLimitsBuckets(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateBucketParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	rateLimitSid := d.Get("rate_limit_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateBucket(serviceSid, rateLimitSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceServicesMessagingConfigurations() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesMessagingConfigurations,
		ReadContext:   readServicesMessagingConfigurations,
		UpdateContext: updateServicesMessagingConfigurations,
		DeleteContext: deleteServicesMessagingConfigurations,
		Schema: map[string]*schema.Schema{
			"service_sid":           AsString(SchemaRequired),
			"country":               AsString(SchemaOptional),
			"messaging_service_sid": AsString(SchemaOptional),
			"account_sid":           AsString(SchemaOptional),
			"date_created":          AsString(SchemaOptional),
			"date_updated":          AsString(SchemaOptional),
			"url":                   AsString(SchemaOptional),
		},
	}
}

func createServicesMessagingConfigurations(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateMessagingConfigurationParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.CreateMessagingConfiguration(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Country))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServicesMessagingConfigurations(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	country := d.Get("country").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteMessagingConfiguration(serviceSid, country)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServicesMessagingConfigurations(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	country := d.Get("country").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchMessagingConfiguration(serviceSid, country)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServicesMessagingConfigurations(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateMessagingConfigurationParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	country := d.Get("country").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateMessagingConfiguration(serviceSid, country, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceServicesEntitiesFactors() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesEntitiesFactors,
		ReadContext:   readServicesEntitiesFactors,
		UpdateContext: updateServicesEntitiesFactors,
		DeleteContext: deleteServicesEntitiesFactors,
		Schema: map[string]*schema.Schema{
			"service_sid":                  AsString(SchemaRequired),
			"identity":                     AsString(SchemaRequired),
			"binding_alg":                  AsString(SchemaOptional),
			"binding_public_key":           AsString(SchemaOptional),
			"binding_secret":               AsString(SchemaOptional),
			"config_alg":                   AsString(SchemaOptional),
			"config_app_id":                AsString(SchemaOptional),
			"config_code_length":           AsInt(SchemaOptional),
			"config_notification_platform": AsString(SchemaOptional),
			"config_notification_token":    AsString(SchemaOptional),
			"config_sdk_version":           AsString(SchemaOptional),
			"config_skew":                  AsInt(SchemaOptional),
			"config_time_step":             AsInt(SchemaOptional),
			"factor_type":                  AsString(SchemaOptional),
			"friendly_name":                AsString(SchemaOptional),
			"account_sid":                  AsString(SchemaOptional),
			"binding":                      AsString(SchemaOptional),
			"config":                       AsString(SchemaOptional),
			"date_created":                 AsString(SchemaOptional),
			"date_updated":                 AsString(SchemaOptional),
			"entity_sid":                   AsString(SchemaOptional),
			"sid":                          AsString(SchemaOptional),
			"status":                       AsString(SchemaOptional),
			"url":                          AsString(SchemaOptional),
		},
	}
}

func createServicesEntitiesFactors(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateNewFactorParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	identity := d.Get("identity").(string)

	r, err := m.(*client.Config).Client.VerifyV2.CreateNewFactor(serviceSid, identity, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServicesEntitiesFactors(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	identity := d.Get("identity").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteFactor(serviceSid, identity, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServicesEntitiesFactors(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	identity := d.Get("identity").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchFactor(serviceSid, identity, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServicesEntitiesFactors(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateFactorParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	identity := d.Get("identity").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateFactor(serviceSid, identity, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceServicesRateLimits() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesRateLimits,
		ReadContext:   readServicesRateLimits,
		UpdateContext: updateServicesRateLimits,
		DeleteContext: deleteServicesRateLimits,
		Schema: map[string]*schema.Schema{
			"service_sid":  AsString(SchemaRequired),
			"description":  AsString(SchemaOptional),
			"unique_name":  AsString(SchemaOptional),
			"account_sid":  AsString(SchemaOptional),
			"date_created": AsString(SchemaOptional),
			"date_updated": AsString(SchemaOptional),
			"links":        AsString(SchemaOptional),
			"sid":          AsString(SchemaOptional),
			"url":          AsString(SchemaOptional),
		},
	}
}

func createServicesRateLimits(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateRateLimitParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.CreateRateLimit(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServicesRateLimits(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteRateLimit(serviceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServicesRateLimits(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchRateLimit(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServicesRateLimits(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateRateLimitParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateRateLimit(serviceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceServices() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServices,
		ReadContext:   readServices,
		UpdateContext: updateServices,
		DeleteContext: deleteServices,
		Schema: map[string]*schema.Schema{
			"code_length":                  AsInt(SchemaOptional),
			"custom_code_enabled":          AsBool(SchemaOptional),
			"do_not_share_warning_enabled": AsBool(SchemaOptional),
			"dtmf_input_required":          AsBool(SchemaOptional),
			"friendly_name":                AsString(SchemaOptional),
			"lookup_enabled":               AsBool(SchemaOptional),
			"psd2_enabled":                 AsBool(SchemaOptional),
			"push_apn_credential_sid":      AsString(SchemaOptional),
			"push_fcm_credential_sid":      AsString(SchemaOptional),
			"push_include_date":            AsBool(SchemaOptional),
			"skip_sms_to_landlines":        AsBool(SchemaOptional),
			"totp_code_length":             AsInt(SchemaOptional),
			"totp_issuer":                  AsString(SchemaOptional),
			"totp_skew":                    AsInt(SchemaOptional),
			"totp_time_step":               AsInt(SchemaOptional),
			"tts_name":                     AsString(SchemaOptional),
			"account_sid":                  AsString(SchemaOptional),
			"date_created":                 AsString(SchemaOptional),
			"date_updated":                 AsString(SchemaOptional),
			"links":                        AsString(SchemaOptional),
			"push":                         AsString(SchemaOptional),
			"sid":                          AsString(SchemaOptional),
			"totp":                         AsString(SchemaOptional),
			"url":                          AsString(SchemaOptional),
		},
	}
}

func createServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateServiceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	r, err := m.(*client.Config).Client.VerifyV2.CreateService(&params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteService(sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchService(sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateServiceParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateService(sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceServicesWebhooks() *schema.Resource {
	return &schema.Resource{
		CreateContext: createServicesWebhooks,
		ReadContext:   readServicesWebhooks,
		UpdateContext: updateServicesWebhooks,
		DeleteContext: deleteServicesWebhooks,
		Schema: map[string]*schema.Schema{
			"service_sid":    AsString(SchemaRequired),
			"event_types":    AsString(SchemaOptional),
			"friendly_name":  AsString(SchemaOptional),
			"status":         AsString(SchemaOptional),
			"webhook_url":    AsString(SchemaOptional),
			"account_sid":    AsString(SchemaOptional),
			"date_created":   AsString(SchemaOptional),
			"date_updated":   AsString(SchemaOptional),
			"sid":            AsString(SchemaOptional),
			"url":            AsString(SchemaOptional),
			"webhook_method": AsString(SchemaOptional),
		},
	}
}

func createServicesWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := CreateWebhookParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.CreateWebhook(serviceSid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId((*r.Sid))
	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func deleteServicesWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	err := m.(*client.Config).Client.VerifyV2.DeleteWebhook(serviceSid, sid)
	d.SetId("")

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func readServicesWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.FetchWebhook(serviceSid, sid)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func updateServicesWebhooks(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := UpdateWebhookParams{}
	if err := UnmarshalSchema(&params, d); err != nil {
		return diag.FromErr(err)
	}

	serviceSid := d.Get("service_sid").(string)
	sid := d.Get("sid").(string)

	r, err := m.(*client.Config).Client.VerifyV2.UpdateWebhook(serviceSid, sid, &params)
	if err != nil {
		return diag.FromErr(err)
	}

	err = MarshalSchema(d, r)

	if err != nil {
		return diag.FromErr(err)
	}
	return nil
}
